2023-05-11 00:57:51,634{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin ../maelstrom-echo/target/release/maelstrom-echo --node-count 2 --time-limit 20 --rate 10
2023-05-11 00:57:51,694{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 2
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16142
         "0x50a1c2f3"
         "maelstrom.db$db$reify__16142@50a1c2f3"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x333813e7" "2023-05-11T00:57:51.621-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x292237cd"
         "maelstrom.net$jepsen_net$reify__15251@292237cd"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0x797a5b31"
         "maelstrom.workload.broadcast$client$reify__16644@797a5b31"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x13d7d1a8"
         "java.util.concurrent.CyclicBarrier@13d7d1a8"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x60035f1e"
         "jepsen.checker$compose$reify__11881@60035f1e"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "../maelstrom-echo/target/release/maelstrom-echo"
  "--node-count"
  "2"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@5827908c"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@732ffb6a"]})
 :nodes ["n0" "n1"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "../maelstrom-echo/target/release/maelstrom-echo"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x40f40221"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@40f40221"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x16441c13"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@16441c13"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 0,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x164dfad2"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@164dfad2"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x76480730"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@76480730"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x405a296e"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x77198cce"
         "maelstrom.net$jepsen_os$reify__15254@77198cce"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-05-11 00:57:52,975{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-05-11 00:57:52,976{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-05-11 00:57:52,977{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-05-11 00:57:52,978{GMT}	INFO	[jepsen node n1] maelstrom.db: Setting up n1
2023-05-11 00:57:52,978{GMT}	INFO	[jepsen node n1] maelstrom.process: launching ../maelstrom-echo/target/release/maelstrom-echo []
2023-05-11 00:57:52,979{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-05-11 00:57:52,981{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-05-11 00:57:52,981{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ../maelstrom-echo/target/release/maelstrom-echo []
2023-05-11 00:57:52,997{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-05-11 00:57:58,003{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2023-05-11 00:57:58,003{GMT}	INFO	[jepsen node n1] maelstrom.db: Tearing down n1
2023-05-11 00:57:59,986{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2023-05-11 00:57:59,988{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Client read timeout
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.client$recv_BANG_.invokeStatic(client.clj:98)
	at maelstrom.client$recv_BANG_.invoke(client.clj:81)
	at maelstrom.client$send_PLUS_recv_BANG_.invokeStatic(client.clj:123)
	at maelstrom.client$send_PLUS_recv_BANG_.invoke(client.clj:119)
	at maelstrom.client$rpc_BANG_.invokeStatic(client.clj:149)
	at maelstrom.client$rpc_BANG_.invoke(client.clj:140)
	at maelstrom.workload.broadcast$fn__16554$topology_BANG___16555.invoke(broadcast.clj:19)
	at maelstrom.workload.broadcast$fn__16554$topology_BANG___16555.invoke(broadcast.clj:19)
	at maelstrom.workload.broadcast$client$reify__16644.setup_BANG_(broadcast.clj:197)
	at jepsen.core$run_case_BANG_$fn__13021.invoke(core.clj:212)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:833)
