2023-05-14 21:42:40,290{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w kafka --bin ../kafka-log/target/release/kafka-log --node-count 1 --concurrency 2n --time-limit 20 --rate 1000
2023-05-14 21:42:40,383{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 2
 :db
 #object[maelstrom.db$db$reify__16142
         "0x732ffb6a"
         "maelstrom.db$db$reify__16142@732ffb6a"]
 :max-writes-per-key 16
 :leave-db-running? false
 :sub-via #{:assign}
 :name "kafka"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x4ce66169" "2023-05-14T21:42:40.274-04:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x53d0cf4d"
         "maelstrom.net$jepsen_net$reify__15251@53d0cf4d"]
 :client
 #maelstrom.workload.kafka.Client{:net #object[clojure.lang.Atom
                                               "0x279b83ea"
                                               {:status :ready,
                                                :val {:p-loss 0,
                                                      :latency-dist #maelstrom.net.ConstantDistribution{:x 0},
                                                      :journal nil,
                                                      :log-recv? false,
                                                      :partitions {},
                                                      :log-send? false,
                                                      :next-client-id -1,
                                                      :next-message-id #object[clojure.lang.Atom
                                                                               "0x7f9083b4"
                                                                               {:status :ready,
                                                                                :val -1}],
                                                      :queues {}}}],
                                  :conn nil,
                                  :node nil,
                                  :offsets nil}
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0x40f40221"
         "java.util.concurrent.CyclicBarrier@40f40221"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 1000.0
 :txn? false
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0x16441c13"
         "jepsen.checker$compose$reify__11881@16441c13"]
 :argv
 ("test"
  "-w"
  "kafka"
  "--bin"
  "../kafka-log/target/release/kafka-log"
  "--node-count"
  "1"
  "--concurrency"
  "2n"
  "--time-limit"
  "20"
  "--rate"
  "1000")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@6d3b59e2"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@164dfad2"]})
 :nodes ["n0"]
 :test-count 1
 :crash-clients? true
 :latency {:mean 0, :dist :constant}
 :bin "../kafka-log/target/release/kafka-log"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x4664fef"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@4664fef"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x1026a011"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@1026a011"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 2000000,
                                  :next-time nil,
                                  :gen (maelstrom.workload.kafka.StringKeys
                                        {:gen (jepsen.generator.Any
                                               {:gens [(jepsen.generator.Stagger
                                                        {:dt 30000000000,
                                                         :next-time nil,
                                                         :gen ({:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               {:f :crash}
                                                               ...)})
                                                       (jepsen.tests.kafka.PollUnseen
                                                        {:gen (jepsen.tests.kafka.InterleaveSubscribes
                                                               {:gen (jepsen.tests.kafka.TrackKeyOffsets
                                                                      {:gen (jepsen.generator.Map
                                                                             {:f #object[jepsen.tests.kafka$tag_rw$tag_rw__18063
                                                                                         "0x39595a8"
                                                                                         "jepsen.tests.kafka$tag_rw$tag_rw__18063@39595a8"],
                                                                              :gen (jepsen.generator.Map
                                                                                    {:f #object[jepsen.tests.kafka$txn_generator$rewrite_op__18027
                                                                                                "0x26169be3"
                                                                                                "jepsen.tests.kafka$txn_generator$rewrite_op__18027@26169be3"],
                                                                                     :gen ({:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     8
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     7
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:append
                                                                                                     8
                                                                                                     1]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     5
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     9
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     7
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     8
                                                                                                     nil]]}
                                                                                           {:type :invoke,
                                                                                            :f :txn,
                                                                                            :value [[:r
                                                                                                     8
                                                                                                     nil]]}
                                                                                           ...)})}),
                                                                       :offsets #object[clojure.lang.Atom
                                                                                        "0x353aadd7"
                                                                                        {:status :ready,
                                                                                         :val {}}]})}),
                                                         :sent {},
                                                         :polled {}})]})})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x10587ce5"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@10587ce5"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x74a37c91"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@74a37c91"],
           :gen (jepsen.generator.TimeLimit
                 {:limit 10000000000,
                  :cutoff nil,
                  :gen (maelstrom.workload.kafka.StringKeys
                        {:gen (jepsen.generator.Filter
                               {:f #object[clojure.core$comp$fn__5876
                                           "0x58581ab6"
                                           "clojure.core$comp$fn__5876@58581ab6"],
                                :gen (jepsen.generator.EachThread
                                      {:fresh-gen #object[clojure.lang.Delay
                                                          "0x3cd3cf6b"
                                                          {:status :pending,
                                                           :val nil}],
                                       :context-filters #object[clojure.core$promise$reify__8591
                                                                "0x6f3f2340"
                                                                {:status :pending,
                                                                 :val nil}],
                                       :gens {}})})})})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x526fbb80"
         "maelstrom.net$jepsen_os$reify__15254@526fbb80"]
 :time-limit 20
 :workload :kafka
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-05-14 21:42:41,680{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-05-14 21:42:41,681{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-05-14 21:42:41,683{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-05-14 21:42:41,685{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-05-14 21:42:41,687{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-05-14 21:42:41,687{GMT}	INFO	[jepsen node n0] maelstrom.process: launching ../kafka-log/target/release/kafka-log []
2023-05-14 21:42:41,702{GMT}	INFO	[jepsen test runner] jepsen.core: Relative time begins now
2023-05-14 21:42:41,715{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:invoke	:crash	nil
2023-05-14 21:42:41,716{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:invoke	:poll	[[:poll]]
2023-05-14 21:42:41,716{GMT}	INFO	[jepsen worker 0] jepsen.util: 0	:info	:crash	nil
2023-05-14 21:42:41,717{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:invoke	:poll	[[:poll]]
2023-05-14 21:42:46,717{GMT}	INFO	[jepsen worker 0] jepsen.util: 2	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:42:46,717{GMT}	INFO	[jepsen worker 1] jepsen.util: 1	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:42:46,718{GMT}	INFO	[jepsen worker 0] jepsen.util: 4	:invoke	:send	[[:send "8" 1]]
2023-05-14 21:42:46,720{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:invoke	:poll	[[:poll]]
2023-05-14 21:42:51,718{GMT}	INFO	[jepsen worker 0] jepsen.util: 4	:info	:send	[[:send "8" 1]]	:net-timeout
2023-05-14 21:42:51,719{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:invoke	:poll	[[:poll]]
2023-05-14 21:42:51,720{GMT}	INFO	[jepsen worker 1] jepsen.util: 3	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:42:51,720{GMT}	INFO	[jepsen worker 1] jepsen.util: 5	:invoke	:poll	[[:poll]]
2023-05-14 21:42:56,719{GMT}	INFO	[jepsen worker 0] jepsen.util: 6	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:42:56,720{GMT}	INFO	[jepsen worker 0] jepsen.util: 8	:invoke	:poll	[[:poll]]
2023-05-14 21:42:56,720{GMT}	INFO	[jepsen worker 1] jepsen.util: 5	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:42:56,721{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:invoke	:assign	["8"]
2023-05-14 21:43:01,720{GMT}	INFO	[jepsen worker 0] jepsen.util: 8	:info	:poll	[[:poll]]	:net-timeout
2023-05-14 21:43:01,721{GMT}	INFO	[jepsen worker 1] jepsen.util: 7	:fail	:assign	["8"]	:net-timeout
2023-05-14 21:43:01,722{GMT}	INFO	[jepsen worker 0] jepsen.generator.interpreter: Waiting for recovery...
2023-05-14 21:43:11,725{GMT}	INFO	[jepsen test runner] jepsen.tests.kafka: Polling up to offsets {}
2023-05-14 21:43:11,736{GMT}	INFO	[jepsen test runner] jepsen.core: Run complete, writing
2023-05-14 21:43:11,767{GMT}	INFO	[jepsen node n0] maelstrom.db: Tearing down n0
2023-05-14 21:43:12,727{GMT}	INFO	[jepsen node n0] maelstrom.net: Shutting down Maelstrom network
2023-05-14 21:43:12,728{GMT}	WARN	[jepsen test runner] jepsen.core: Test crashed!
clojure.lang.ExceptionInfo: Node n0 crashed with exit status 1. Before crashing, it wrote to STDOUT:

{"src":"n0","dest":"c0","body":{"type":"init_ok","in_reply_to":1}}

And to STDERR:

Error: Error("missing field `offset`", line: 1, column: 78)

Full STDERR logs are available in /home/eman/gossip-glomers/maelstrom/store/kafka/20230514T214240.274-0400/node-logs/n0.log
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$stop_node_BANG_.invokeStatic(process.clj:239)
	at maelstrom.process$stop_node_BANG_.invoke(process.clj:217)
	at maelstrom.db$db$reify__16142.teardown_BANG_(db.clj:75)
	at jepsen.db$fn__8744$G__8725__8748.invoke(db.clj:12)
	at jepsen.db$fn__8744$G__8724__8753.invoke(db.clj:12)
	at clojure.core$partial$fn__5908.invoke(core.clj:2642)
	at jepsen.control$on_nodes$fn__8599.invoke(control.clj:314)
	at clojure.lang.AFn.applyToHelper(AFn.java:154)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.applyTo(RestFn.java:142)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:408)
	at dom_top.core$real_pmap_helper$build_thread__211$fn__212.invoke(core.clj:163)
	at clojure.lang.AFn.applyToHelper(AFn.java:152)
	at clojure.lang.AFn.applyTo(AFn.java:144)
	at clojure.core$apply.invokeStatic(core.clj:667)
	at clojure.core$with_bindings_STAR_.invokeStatic(core.clj:1990)
	at clojure.core$with_bindings_STAR_.doInvoke(core.clj:1990)
	at clojure.lang.RestFn.invoke(RestFn.java:425)
	at clojure.lang.AFn.applyToHelper(AFn.java:156)
	at clojure.lang.RestFn.applyTo(RestFn.java:132)
	at clojure.core$apply.invokeStatic(core.clj:671)
	at clojure.core$bound_fn_STAR_$fn__5818.doInvoke(core.clj:2020)
	at clojure.lang.RestFn.invoke(RestFn.java:397)
	at clojure.lang.AFn.run(AFn.java:22)
	at java.base/java.lang.Thread.run(Thread.java:833)
